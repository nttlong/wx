//package htttpserver

// import (
// 	"fmt"
// 	"net/http"
// 	"reflect"
// 	"strings"
// 	vError "wx/errors"
// )

// func (web *webHandlerRunnerType) CreateHttpContextDelete(handler WebHandler, w http.ResponseWriter, r *http.Request) (reflect.Value, error) {
// 	context := reflect.New(handler.ApiInfo.TypeOfArgsElem)

// 	context.Elem().FieldByName("Req").Set(reflect.ValueOf(r))
// 	context.Elem().FieldByName("Res").Set(reflect.ValueOf(w))
// 	context.Elem().FieldByName("BaseUrl").Set(reflect.ValueOf(baseUrlOfServer))
// 	if handler.ApiInfo.IsRegexHandler {

// 		placeHolders := handler.ApiInfo.RegexUriFind.FindStringSubmatch(r.URL.Path)

// 		if len(placeHolders) == 0 {
// 			return context, fmt.Errorf("invalid uri")
// 		}
// 		for i, uriParam := range handler.ApiInfo.UriParams {
// 			fieldSet, ok := handler.ApiInfo.TypeOfArgsElem.FieldByNameFunc(func(s string) bool {
// 				return strings.EqualFold(s, uriParam.Name)
// 			})
// 			if !ok {

// 				return context, vError.NewUriParamParseError(uriParam.Name, handler.ApiInfo.TypeOfArgsElem)
// 			}

// 			valueSet := reflect.ValueOf(placeHolders[i+1])
// 			fielValueSet := context.Elem().FieldByIndex(fieldSet.Index)

// 			if fielValueSet.CanConvert(valueSet.Type()) {
// 				fielValueSet.Set(valueSet)
// 			} else {

// 				return context, vError.NewUriParamConvertError(uriParam.Name, valueSet.Type(), fielValueSet.Type())

// 			}

// 		}

// 	}
// 	return context, nil
// }
